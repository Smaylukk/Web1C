
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьСоставОбъектов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставОбъектов()
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов");
	Дерево.Строки.очистить();
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить("Web1C_Страницы");
	МассивОбъектов.Добавить("Web1C_Ресурсы");
	МассивОбъектов.Добавить("Web1C_Компоненты");
	МассивОбъектов.Добавить("Web1C_ИсточникДанных");
	МассивОбъектов.Добавить("Web1C_ОтчетыЛичногоКабинета");
	
	Для каждого ТекОбъект Из МассивОбъектов Цикл
		ВывестиОбъектыВдерево(Дерево, ТекОбъект);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
КонецПроцедуры

Процедура ВывестиОбъектыВдерево(Дерево, ТекОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ТекОбъект + " КАК Справочник
	|ГДЕ
	|	Справочник.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Справочник.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Объект = ТекОбъект;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Подстрока = НоваяСтрока.Строки.Добавить();
		Подстрока.Объект = Выборка.Ссылка;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для каждого ТекСтрока Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Развернуть(текстрока.получитьидентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	Для каждого ТекСтрока Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Свернуть(текстрока.получитьидентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	Для каждого ТекСтрока Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Развернуть(текстрока.получитьидентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, ДеревоОбъектов.НайтиПоИдентификатору(ВыбраннаяСтрока).Объект);
КонецПроцедуры

&НаСервере
Процедура ОбъектыДляВыгрузкиПеретаскиваниеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляВыгрузкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СвязанныеОбъекты = Новый СписокЗначений;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для каждого ТекСтрока Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ТекСтрока.Объект) <> Тип("Строка") Тогда
				ТекОбъект = ТекСтрока.Объект;
				СвязанныеОбъекты.Добавить(ТекОбъект, , Истина);
				
				Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Web1C_Ресурсы") Тогда
					ДобавитьПапкиРесурсов(СвязанныеОбъекты, ТекОбъект, Истина);
				КонецЕсли;
				
				НайтиСвязанныеОбъекты(ТекОбъект, СвязанныеОбъекты);
				СвязанныеОбъекты.СортироватьПоЗначению();
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекОбъект = ПараметрыПеретаскивания.Значение.Объект;
		СвязанныеОбъекты.Добавить(ТекОбъект, , Истина);
		
		Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Web1C_Ресурсы") Тогда
			ДобавитьПапкиРесурсов(СвязанныеОбъекты, ТекОбъект, Истина);
		КонецЕсли;
		
		НайтиСвязанныеОбъекты(ТекОбъект, СвязанныеОбъекты);
		СвязанныеОбъекты.СортироватьПоЗначению();
	КонецЕсли;
	//ТекОбъект = ПараметрыПеретаскивания.Значение.Объект;
	//СвязанныеОбъекты.Добавить(ТекОбъект, , Истина);
	//
	//НайтиСвязанныеОбъекты(ТекОбъект, СвязанныеОбъекты);
	//СвязанныеОбъекты.СортироватьПоЗначению();
	
	ОО = Новый ОписаниеОповещения("ПослеОтметкиСпискаОбъектов", ЭтотОбъект);
	СвязанныеОбъекты.ПоказатьОтметкуЭлементов(ОО, "Отметьте только необходимые связанные объекты");
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтметкиСпискаОбъектов(Список, ДопПараметры) Экспорт 
	Если Список <> Неопределено Тогда
		Индекс = ОбъектыДляВыгрузки.Количество() + 1;
		Для каждого ТекЭлемент Из Список Цикл
			Если ТекЭлемент.Пометка И ОбъектыДляВыгрузки.НайтиСтроки(Новый Структура("Объект", ТекЭлемент.Значение)).Количество() = 0 Тогда
				НоваяСтрока = ОбъектыДляВыгрузки.Добавить();
				НоваяСтрока.Объект = ТекЭлемент.Значение;
				НоваяСтрока.НомерСтроки = Индекс;
				
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбъектыДляВыгрузки.Сортировать("Объект");
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура НайтиСвязанныеОбъекты(ТекОбъект, СвязанныеОбъекты)
	Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Web1C_Страницы") Тогда
		НайтиСвязанныеОбъекты_Страница(ТекОбъект, СвязанныеОбъекты);
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Web1C_Ресурсы") Тогда
		НайтиСвязанныеОбъекты_Ресурс(ТекОбъект, СвязанныеОбъекты);
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Web1C_Компоненты") Тогда
		НайтиСвязанныеОбъекты_Блок(ТекОбъект, СвязанныеОбъекты);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НайтиСвязанныеОбъекты_Страница(ТекОбъект, СвязанныеОбъекты)
	СтраницаОбъект = ТекОбъект.ПолучитьОбъект();;
	Если Ложь Тогда
		СтраницаОбъект = Справочники.Web1C_Страницы.СоздатьЭлемент()
	КонецЕсли;
	
	Для каждого ТекСтрокаСтиля Из СтраницаОбъект.Стили Цикл
		Если СвязанныеОбъекты.НайтиПоЗначению(ТекСтрокаСтиля.Стиль) = Неопределено Тогда
			Если ВыгружатьВсеСвязанныеОбъекты Тогда
				Пометка = Истина
			Иначе
				Пометка = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаСтиля.Стиль, "ВыгруженВСетевуюПапку");
			КонецЕсли;
			
			Если Пометка Тогда
				СвязанныеОбъекты.Добавить(ТекСтрокаСтиля.Стиль, , Пометка);
			
				ДобавитьПапкиРесурсов(СвязанныеОбъекты, ТекСтрокаСтиля.Стиль, Пометка);
			КонецЕсли;
			
			//СвязанныеОбъекты.Добавить(ТекСтрокаСтиля.Стиль, , Истина);
			
			НайтиСвязанныеОбъекты_Ресурс(ТекСтрокаСтиля.Стиль, СвязанныеОбъекты);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрокаСкрипта Из СтраницаОбъект.Скрипты Цикл
		Если СвязанныеОбъекты.НайтиПоЗначению(ТекСтрокаСкрипта.Скрипт) = Неопределено Тогда
			Если ВыгружатьВсеСвязанныеОбъекты Тогда
				Пометка = Истина
			Иначе
				Пометка = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаСкрипта.Скрипт, "ВыгруженВСетевуюПапку");
			КонецЕсли;
			
			Если Пометка Тогда
				СвязанныеОбъекты.Добавить(ТекСтрокаСкрипта.Скрипт, , Пометка);
			
				ДобавитьПапкиРесурсов(СвязанныеОбъекты, ТекСтрокаСкрипта.Скрипт, Пометка);
			КонецЕсли;
			
			//СвязанныеОбъекты.Добавить(ТекСтрокаСкрипта.Скрипт, , Истина);
			
			НайтиСвязанныеОбъекты_Ресурс(ТекСтрокаСкрипта.Скрипт, СвязанныеОбъекты);
		КонецЕсли;
	КонецЦикла;
	
	НайтиСсылкаНаБлокиТекстов(СтраницаОбъект.Шаблон, СвязанныеОбъекты);
	НайтиСсылкиНаИзображения(СтраницаОбъект.Шаблон, СвязанныеОбъекты);
	НайтиСсылкиНаФайлы(СтраницаОбъект.Шаблон, СвязанныеОбъекты);
	НайтиСсылкиНаРесурсы(СтраницаОбъект.Шаблон, СвязанныеОбъекты);
КонецПроцедуры

&НаСервере
Процедура НайтиСвязанныеОбъекты_Ресурс(ТекОбъект, СвязанныеОбъекты)
	РесурсОбъект = ТекОбъект.ПолучитьОбъект();
	
	Если Ложь Тогда
		РесурсОбъект = Справочники.Web1C_Ресурсы.СоздатьЭлемент()
	КонецЕсли;
	
	Если РесурсОбъект.ВидРесурса = ПредопределенноеЗначение("Перечисление.Web1C_ВидыРесурса.Стиль") Или РесурсОбъект.ВидРесурса = ПредопределенноеЗначение("Перечисление.Web1C_ВидыРесурса.Скрипт") Тогда
		Если РесурсОбъект.ВнешнийФайл = 0 Тогда
			НайтиСсылкиНаИзображения(РесурсОбъект.Текст, СвязанныеОбъекты);
			НайтиСсылкиНаФайлы(РесурсОбъект.Текст, СвязанныеОбъекты);
			НайтиСсылкиНаРесурсы(РесурсОбъект.Текст, СвязанныеОбъекты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСвязанныеОбъекты_Блок(ТекОбъект, СвязанныеОбъекты)
	БлокОбъект = ТекОбъект.ПолучитьОбъект();
	Для каждого ТекСтрокаСостава Из БлокОбъект.Состав Цикл
		Если ЗначениеЗаполнено(ТекСтрокаСостава.ИсточникДанных) И ТипЗнч(ТекСтрокаСостава.ИсточникДанных) = Тип("СправочникСсылка.Web1C_ИсточникДанных") Тогда
			Если СвязанныеОбъекты.НайтиПоЗначению(ТекСтрокаСостава.ИсточникДанных) = Неопределено Тогда
				СвязанныеОбъекты.Добавить(ТекСтрокаСостава.ИсточникДанных, , Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекСтрокаСостава.Текст) Тогда
			НайтиСсылкаНаБлокиТекстов(ТекСтрокаСостава.Текст, СвязанныеОбъекты);
			НайтиСсылкиНаИзображения(ТекСтрокаСостава.Текст, СвязанныеОбъекты);
			НайтиСсылкиНаФайлы(ТекСтрокаСостава.Текст, СвязанныеОбъекты);
			НайтиСсылкиНаРесурсы(ТекСтрокаСостава.Текст, СвязанныеОбъекты);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкиНаИзображения(Текст, СвязанныеОбъекты)
	Если СтрНайти(Текст, "{#images_", НаправлениеПоиска.СНачала) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		ПозНач = СтрНайти(Текст, "{#images_", НаправлениеПоиска.СНачала);
		Если ПозНач > 0 Тогда
			ПозКон = СтрНайти(Текст, "#}", НаправлениеПоиска.СНачала, ПозНач);
			СсылкаНаИзображение = "";
			УИД = Сред(Текст, ПозНач, ПозКон - ПозНач);
			УИД = СтрЗаменить(УИД, "{#images_", "");
			Изображение = Справочники.Web1C_Ресурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
			Если Не Изображение.Пустая() И СвязанныеОбъекты.НайтиПоЗначению(Изображение) = Неопределено Тогда
				Если ВыгружатьВсеСвязанныеОбъекты Тогда
					Пометка = Истина
				Иначе
					Пометка = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Изображение, "ВыгруженВСетевуюПапку");
				КонецЕсли;
				
				Если Пометка Тогда
					СвязанныеОбъекты.Добавить(Изображение, , Пометка);
				
					ДобавитьПапкиРесурсов(СвязанныеОбъекты, Изображение, Пометка);
				КонецЕсли;
				
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст, "{#images_" + Изображение.УникальныйИдентификатор() + "#}", "");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкиНаФайлы(Текст, СвязанныеОбъекты)
	Если СтрНайти(Текст, "{#files_", НаправлениеПоиска.СНачала) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		ПозНач = СтрНайти(Текст, "{#files_", НаправлениеПоиска.СНачала);
		Если ПозНач > 0 Тогда
			ПозКон = СтрНайти(Текст, "#}", НаправлениеПоиска.СНачала, ПозНач);
			СсылкаНаФайл = "";
			УИД = Сред(Текст, ПозНач, ПозКон - ПозНач);
			УИД = СтрЗаменить(УИД, "{#files_", "");
			Файл = Справочники.Web1C_Ресурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
			Если Не Файл.Пустая() И СвязанныеОбъекты.НайтиПоЗначению(Файл) = Неопределено Тогда
				Если ВыгружатьВсеСвязанныеОбъекты Тогда
					Пометка = Истина
				Иначе
					Пометка = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВыгруженВСетевуюПапку");
				КонецЕсли;
				
				Если Пометка Тогда
					СвязанныеОбъекты.Добавить(Файл, , Пометка);
				
					ДобавитьПапкиРесурсов(СвязанныеОбъекты, Файл, Пометка);
				КонецЕсли;
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст, "{#files_" + Файл.УникальныйИдентификатор() + "#}", "");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкиНаРесурсы(Текст, СвязанныеОбъекты)
	Если СтрНайти(Текст, "{#res_", НаправлениеПоиска.СНачала) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		ПозНач = СтрНайти(Текст, "{#res_", НаправлениеПоиска.СНачала);
		Если ПозНач > 0 Тогда
			ПозКон = СтрНайти(Текст, "#}", НаправлениеПоиска.СНачала, ПозНач);
			СсылкаНаФайл = "";
			УИД = Сред(Текст, ПозНач, ПозКон - ПозНач);
			УИД = СтрЗаменить(УИД, "{#res_", "");
			Ресурс = Справочники.Web1C_Ресурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
			Если Не Ресурс.Пустая() И СвязанныеОбъекты.НайтиПоЗначению(Ресурс) = Неопределено Тогда
				Если ВыгружатьВсеСвязанныеОбъекты Тогда
					Пометка = Истина
				Иначе
					Пометка = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "ВыгруженВСетевуюПапку");
				КонецЕсли;
				
				Если Пометка Тогда
					СвязанныеОбъекты.Добавить(Ресурс, , Пометка);
				
					ДобавитьПапкиРесурсов(СвязанныеОбъекты, Ресурс, Пометка);
				КонецЕсли;
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст, "{#res_" + Ресурс.УникальныйИдентификатор() + "#}", "");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкаНаБлокиТекстов(Текст, СвязанныеОбъекты)
	Пока Истина Цикл
		ПозНач = СтрНайти(Текст, "{#Блок_", НаправлениеПоиска.СНачала);
		Если ПозНач > 0 Тогда
			ПозКон = СтрНайти(Текст, "#}", НаправлениеПоиска.СНачала, ПозНач);
			ТекстМакета = "";
			УИД = Сред(Текст, ПозНач, ПозКон - ПозНач);
			УИД = СтрЗаменить(УИД, "{#Блок_", "");
			Макет = Справочники.Web1C_Компоненты.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
			Если Не Макет.Пустая() И СвязанныеОбъекты.НайтиПоЗначению(Макет) = Неопределено Тогда
				СвязанныеОбъекты.Добавить(Макет, , Истина);
				
				НайтиСвязанныеОбъекты_Блок(Макет, СвязанныеОбъекты);
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст, "{#Блок_" + Макет.УникальныйИдентификатор() + "#}", "");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПапкиРесурсов(СвязанныеОбъекты, Ресурс, Пометка)
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "Родитель");
	Пока Истина Цикл
		Если Родитель.Пустая() Тогда
			Прервать;
		Иначе
			Если СвязанныеОбъекты.НайтиПоЗначению(Родитель) = Неопределено Тогда
				СвязанныеОбъекты.Добавить(Родитель, , Пометка);
			КонецЕсли;
			
			Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляВыгрузкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") И ТипЗнч(ПараметрыПеретаскивания.Значение.Объект) = Тип("Строка") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	а = 1;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Заголовок = "Выберите файл для сохранения данных";
	ДВФ.МножественныйВыбор = Ложь;
	ДВФ.Фильтр = "XML файлы(*.xml)|*.xml";
	
	ОО = Новый ОписаниеОповещения("ПослеВыбораФайлаВыгрузки", ЭтотОбъект);
	ДВФ.Показать(ОО);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВыгрузки(ВыбранныеФайлы, ДопПараметры) Экспорт 
	Если ВыбранныеФайлы <> Неопределено Тогда 
		ТекстФайла = ВыгрузитьНаСервере();
		Если ЗначениеЗаполнено(ТекстФайла) Тогда
			ТД = Новый ТекстовыйДокумент;
			ТД.УстановитьТекст(ТекстФайла);
			ТД.Записать(ВыбранныеФайлы[0], "UTF-8");
			
			Сообщить("Данные успешно выгружены в " + ВыбранныеФайлы[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере()
	Результат = "";
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("data");
	
	Для каждого ТекСтрока Из ОбъектыДляВыгрузки Цикл
		ЗаписатьXML(Запись, ТекСтрока.Объект.ПолучитьОбъект());
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Результат = Запись.Закрыть();
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	Файл = Новый Файл(ФайлЗагрузки);
	Если Файл.Существует() Тогда
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ФайлЗагрузки, "UTF-8");
		Сообщение = ТД.ПолучитьТекст();
		
		ПрочитатьНаСервере(Сообщение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаЗагрузки(ВыбранныеФайлы, ДопПараметры) Экспорт 
	Если ВыбранныеФайлы <> Неопределено Тогда 
		ФайлЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаСервере(Сообщение)
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Сообщение);
	Чтение.Прочитать();
	
	Выполнять = Истина;
	Пока Выполнять Цикл
		Если ВозможностьЧтенияXML(Чтение) Тогда
			ТекОбъект = ПрочитатьXML(Чтение);
			Если ТекОбъект <> Неопределено Тогда
				Попытка
					ТекОбъект.Записать();
					
					Сообщить("Загружен " + Строка(ТекОбъект.Ссылка));
				Исключение
					Сообщить(СтрШаблон("Ошибка записи объекта %1 - %2", ТекОбъект, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
		Иначе
			Выполнять = Чтение.Прочитать();
		КонецЕсли; 
	КонецЦикла;
	
	Чтение.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Заголовок = "Выберите файл для сохранения данных";
	ДВФ.МножественныйВыбор = Ложь;
	ДВФ.Фильтр = "XML файлы(*.xml)|*.xml";
	
	ОО = Новый ОписаниеОповещения("ПослеВыбораФайлаЗагрузки", ЭтотОбъект);
	ДВФ.Показать(ОО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлануОбменаНаСервере()
	Изменения = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного + 1);
	ОбъектыДляВыгрузки.Очистить();
	
	н = 1;
	Пока Изменения.Следующий() Цикл
		НоваяСтрока = ОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.НомерСтроки = н;
		НоваяСтрока.Объект = Изменения.Получить().Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануОбмена(Команда)
	ЗаполнитьПоПлануОбменаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьИзмененияНаСервере()
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзменения(Команда)
	ОчиститьИзмененияНаСервере();
КонецПроцедуры

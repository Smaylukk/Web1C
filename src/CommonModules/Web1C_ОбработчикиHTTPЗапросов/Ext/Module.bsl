
//основные обработчики http-запросов

Функция НачальнаяСтраницаGet(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "Главная страница");
	Если ИнфоОПользователе.Успех Тогда
		//открываем форму списка
		ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура;
		ВходящиеПараметры.Вставить("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
		ВходящиеПараметры.Вставить("АктивноеМеню", 0);
		ВходящиеПараметры.Вставить("Контрагент", ДанныеПользователя.Контрагент);
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.НачальнаяСтраница"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		NextURL = Web1C_ФормированиеОтветов.СформироватьNextURL(Запрос.БазовыйURL, Запрос.ОтносительныйURL, Запрос.Заголовки.Получить("Host"));
		Web1C_УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", NextURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ДействиеPOST(Запрос) Экспорт
	//при POST-запросе надо указать серверу, чтобы ушел редирект на  Location
	//необходимо дабы при обновлении страницы не происходила повторная отправка запроса
	//Запрос.
	Ответ = Новый HTTPСервисОтвет(303);
	
	Действие = Запрос.ПараметрыURL["Действие"];
	
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "Авторизация - " + Действие);
	Если Действие = "login" Тогда
		Web1C_Авторизация.ЛогинЛогаут(Запрос, Ответ);
		//в результате авторизации получаем ответ
	КонецЕсли;
	
	Куки = Web1C_УправлениеКуки.ПолучитьCoockie(Запрос);
	Если Куки.Получить("NextURL") <> Неопределено Тогда
		Ответ.Заголовки.Вставить("Location", Куки.Получить("NextURL"));
	Иначе
		Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ДействиеGET(Запрос) Экспорт
	//при POST-запросе надо указать серверу, чтобы ушел редирект на  Location
	//необходимо дабы при обновлении страницы не происходила повторная отправка запроса
	Ответ = Новый HTTPСервисОтвет(303);
	
	Действие = Запрос.ПараметрыURL["Действие"];
	Если Действие = "logout" Тогда
		Web1C_Авторизация.ЛогинЛогаут(Запрос, Ответ);
	КонецЕсли;
	
	Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	
	Возврат Ответ;
КонецФункции

Функция ВходПоТокенуGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(303);
	
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
		Токен = ПараметрыЗапроса.Получить("id");
		ОписаниеТипа = Новый ОписаниеТипов("УникальныйИдентификатор");
		Если ЗначениеЗаполнено(Токен) Тогда
			ОписаниеТокена = Web1C_Авторизация.ПолучитьОписаниеТокена(Токен);
			Если ОписаниеТокена.Токен = Неопределено Тогда
				П = Новый Структура; 
				П.Вставить("ОшибкаАвторизации", "Информация по токену не получена. Возможно вы передали неверный токен.");
				Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
			Иначе
				//если у токена истек срок использования - страницы авторизации
				Если ОписаниеТокена.СрокДействия < ТекущаяДата() Тогда
					Web1C_Авторизация.ДеактивироватьТокен(Токен, Неопределено);
					
					П = Новый Структура; 
					П.Вставить("ОшибкаАвторизации", "Истек срок годности токена!");
					Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
				ИначеЕсли ОписаниеТокена.ОбъектАвторизацииОтключен Тогда
					Web1C_Авторизация.ДеактивироватьТокен(Токен, Неопределено);
					
					П = Новый Структура; 
					П.Вставить("ОшибкаАвторизации", "Ваш аккаунт отключен! Обратитесь к вашему менеджеру.");
					Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
				Иначе
					//смотрим через куки, есть ли у сеанса хеш логин
					//если есть - надо деактивировать и потом выдать новый
					Куки = Web1C_УправлениеКуки.ПолучитьCoockie(Запрос);
					hash_login = Куки.Получить("hash_login");
					Web1C_Авторизация.ДеактивироватьСессию(hash_login);
					
					//создаем новую сессию
					Попытка Браузер = Запрос.Заголовки.Получить("User-Agent"); Исключение Браузер = ""; КонецПопытки; 
					Попытка IPАдрес = Запрос.Заголовки.Получить("Client-IP"); Исключение IPАдрес = ""; КонецПопытки; 
					Сессия = Web1C_Авторизация.СоздатьСессию(ОписаниеТокена.ОбъектАвторизации, Ложь, Браузер, IPАдрес);
					
					Web1C_Авторизация.ЗаписатьАктивность(Запрос, ОписаниеТокена.ОбъектАвторизации, "Вход по токену");
					Web1C_Авторизация.ДеактивироватьТокен(Токен, Сессия.id);
					Web1C_УправлениеКуки.CoockieВОтвет(Ответ, "hash_login", Сессия.id, Сессия.Истекает, "/");
				КонецЕсли;
			КонецЕсли;
		Иначе
			//получаем текст страницы
			Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.Страница404"), Ответ, Неопределено);
		КонецЕсли;
	Иначе
		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.Страница404"), Ответ, Неопределено);
	КонецЕсли;
		
	Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	
	Возврат Ответ;
КонецФункции

Функция APIPOST(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "");
	Если ИнфоОПользователе.Успех Тогда
		//получаем данные
		ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ПараметрыЗапроса = Web1C_ФормированиеОтветов.ПолучитьПараметры(Запрос.ПолучитьТелоКакСтроку());
		Результат = "#"; //в результате успешного выполнения переменная будет со значением
		Ошибка = "";
		Если ПараметрыЗапроса.Свойство("method")Тогда
			Метод = ПараметрыЗапроса["method"];
			Web1C_Авторизация.ЗаписатьАктивность(Запрос, ИнфоОПользователе.ОбъектАвторизации, "API, метод - " + Метод);
			Если Метод = "methodName" Тогда // добавить товар в корзину
				//ДобавитьТоварВКорзину(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
			Иначе 
				Ошибка = "Вызов неизвестного метода - " + Метод;
			КонецЕсли;
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
		КонецЕсли;
		
		ДанныеСериализации = Новый Структура;
		ДанныеСериализации.Вставить("result", Результат);
		ДанныеСериализации.Вставить("error", Ошибка);
		РезультатJSON = Web1C_ФормированиеОтветов.СериализоватьВJSON(ДанныеСериализации);
		
		Ответ.УстановитьТелоИзСтроки(РезультатJSON);
		
		Ответ.Заголовки.Вставить("Content-Type","application/json");
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции

Функция APIGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "");
	Если ИнфоОПользователе.Успех Тогда
		//получаем данные
		ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		Результат = "#"; //в результате успешного выполнения переменная будет со значением
		Ошибка = "";
		Если ПараметрыЗапроса.Получить("method") <> Неопределено Тогда
			Метод = ПараметрыЗапроса.Получить("method");
			Web1C_Авторизация.ЗаписатьАктивность(Запрос, ИнфоОПользователе.ОбъектАвторизации, "API, метод - " + Метод);
			Если Метод = "methodName" Тогда //получение параметров отчета
				
			Иначе 
				Ошибка = "Вызов неизвестного метода - " + Метод;
			КонецЕсли;
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
		КонецЕсли;
		
		ДанныеСериализации = Новый Структура;
		ДанныеСериализации.Вставить("result", Результат);
		ДанныеСериализации.Вставить("error", Ошибка);
		РезультатJSON = Web1C_ФормированиеОтветов.СериализоватьВJSON(ДанныеСериализации);
		
		Ответ.УстановитьТелоИзСтроки(РезультатJSON);
		
		Ответ.Заголовки.Вставить("Content-Type","application/json");
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции

Функция ПечатьGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "Печать документов");
	Если ИнфоОПользователе.Успех Тогда		
		//получаем данные
		ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		Результат = "";
		Ошибка = "";
		Если ПараметрыЗапроса.Получить("type") <> Неопределено Тогда
			Тип = ПараметрыЗапроса.Получить("type");
			Если Тип = "order" Тогда
				ПечатьЗаказа(ДанныеПользователя, ПараметрыЗапроса, Ответ)
			ИначеЕсли Тип = "orderPdf" Тогда
				ПечатьЗаказаPdf(ДанныеПользователя, ПараметрыЗапроса, Ответ)
			Иначе 
				Ошибка = "Вызов типа документа на печать - " + Тип;
				
				Ответ.УстановитьТелоИзСтроки(Ошибка);
				Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
			КонецЕсли;			
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
			
			Ответ.УстановитьТелоИзСтроки(Ошибка);
			Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции

Функция ОтчетыGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "Страница заказа");
	Если ИнфоОПользователе.Успех Тогда
		ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура("ОбъектАвторизации, Отчет", ДанныеПользователя.ОбъектАвторизации, Неопределено);
		ВходящиеПараметры.Вставить("АктивноеМеню", 3);
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаОтчетов"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		NextURL = Web1C_ФормированиеОтветов.СформироватьNextURL(Запрос.БазовыйURL, Запрос.ОтносительныйURL, Запрос.Заголовки.Получить("Host"));
		Web1C_УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", NextURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПечатьОтчетаPOST(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	//ИнфоОПользователе = Web1C_Авторизация.СессияАктивна(Запрос, "Страница заказа");
	//Если ИнфоОПользователе.Успех Тогда
	//	ДанныеПользователя = Web1C_ВыборкаДанных.ПолучитьДанныеПользователя(ИнфоОПользователе);
	//	ТекстОшибки = "";
	//	ПараметрыЗапроса = Web1C_ФормированиеОтветов.ПолучитьПараметрыКакСоответствие(Запрос.ПолучитьТелоКакСтроку());
	//	ИдОтчета = ПараметрыЗапроса.Получить("report_id");
	//	Пароль = "";
	//	СохранятьПДФ = Ложь;
	//	Если ПараметрыЗапроса.Получить("save_as_pdf") = "on" Тогда
	//		СохранятьПДФ = Истина;
	//	КонецЕсли;
	//	Если ПараметрыЗапроса.Получить("password_report") <> Неопределено Тогда
	//		Пароль = ПараметрыЗапроса.Получить("password_report");
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено(ИдОтчета) Тогда
	//		ТекстОшибки = "Не найден ИД отчета - обратись к разработчикам";
	//		ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
	//		Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
	//		
	//		Возврат Ответ;
	//	Иначе
	//		Отчет = XMLЗначение(Тип("СправочникСсылка.Web1C_ОтчетыЛичногоКабинета"), ИдОтчета);
	//		Если Не ЗначениеЗаполнено(Отчет) Тогда
	//			ТекстОшибки = "Неизвестный Ид отчета - " + ИдОтчета;
	//			ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
	//			Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
	//			
	//			Возврат Ответ;
	//		Иначе
	//			ВходящиеПараметры = Новый Структура("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
	//			ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
	//			
	//			ОтчетОбъект = Отчет.ПолучитьОбъект();
	//			Если Ложь Тогда
	//				ОтчетОбъект = Справочники.Web1C_ОтчетыЛичногоКабинета.СоздатьЭлемент();
	//			КонецЕсли;
	//			
	//			Если Не ПустаяСтрока(ОтчетОбъект.Пароль) Тогда
	//				Если Пароль <> ОтчетОбъект.Пароль Тогда
	//					ТекстОшибки = "Указан неверный пароль доступа к отчету";
	//					ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
	//					Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
	//					
	//					Возврат Ответ;
	//				КонецЕсли;
	//			КонецЕсли;
	//			ПараметрыОтчета = Новый Структура;
	//			ПараметрыОтчета.Вставить("СсылкаВарианта", ОтчетОбъект.ВариантОтчета);
	//			ПараметрыОтчета.Вставить("СсылкаОтчета", ОтчетОбъект.ВариантОтчета.Отчет);
	//			ПараметрыОтчета.Вставить("КлючВарианта", ОтчетОбъект.ВариантОтчета.КлючВарианта);
	//			ПараметрыОтчета.Вставить("ИдентификаторФормы", Неопределено);
	//			НастройкиОтчета = ВариантыОтчетов.ПодключитьОтчетИЗагрузитьНастройки(ПараметрыОтчета);
	//			
	//			//Установка параметров, полученных в теле запроса
	//			ПользовательскиеНастройкиКД = НастройкиОтчета.ПользовательскиеНастройкиКд;
	//			Для каждого ТекПараметр Из ПараметрыЗапроса Цикл
	//				СтрокаПараметров = ОтчетОбъект.ПараметрыОтчета.Найти(ТекПараметр.Ключ, "Идентификатор");
	//				Если СтрокаПараметров <> Неопределено Тогда
	//					ЗначениеПараметра = Неопределено;
	//					Если СтрокаПараметров.Тип = Перечисления.Web1C_ДоступныеТипыПолейДляЛК.Строка Тогда
	//						ЗначениеПараметра = ТекПараметр.Значение;
	//					ИначеЕсли СтрокаПараметров.Тип = Перечисления.Web1C_ДоступныеТипыПолейДляЛК.Число Тогда
	//						ОТ = Новый ОписаниеТипов("Число");
	//						ЗначениеПараметра = ОТ.ПривестиЗначение(ТекПараметр.Значение);
	//					ИначеЕсли СтрокаПараметров.Тип = Перечисления.Web1C_ДоступныеТипыПолейДляЛК.Дата Тогда
	//						ЗначениеДата = СтрЗаменить(ТекПараметр.Значение, "-", "") + "000000";
	//						ОТ = Новый ОписаниеТипов("Дата");
	//						ЗначениеПараметра = ОТ.ПривестиЗначение(ЗначениеДата);
	//					ИначеЕсли СтрокаПараметров.Тип = Перечисления.Web1C_ДоступныеТипыПолейДляЛК.Булево Тогда
	//						ОТ = Новый ОписаниеТипов("Булево");
	//						ЗначениеПараметра = ОТ.ПривестиЗначение(ТекПараметр.Значение);
	//					ИначеЕсли СтрокаПараметров.Тип = Перечисления.Web1C_ДоступныеТипыПолейДляЛК.СтандартныйПериод Тогда
	//						ОТ = Новый ОписаниеТипов("Дата");
	//						
	//						ЗначениеДата1 = СтрЗаменить(ТекПараметр.Значение, "-", "") + "000000";
	//						ЗначениеПараметра1 = ОТ.ПривестиЗначение(ЗначениеДата1);
	//						
	//						ЗначениеДата2 = СтрЗаменить(ПараметрыЗапроса.Получить(ТекПараметр.Ключ + "_2"), "-", "") + "235959";
	//						ЗначениеПараметра2 = ОТ.ПривестиЗначение(ЗначениеДата2);
	//						
	//						ЗначениеПараметра = Новый СтандартныйПериод(ЗначениеПараметра1, ЗначениеПараметра2);
	//					КонецЕсли;
	//					Для каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
	//						Если ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки = ТекПараметр.Ключ Тогда
	//							ПользовательскаяНастройкаКД.Значение = ЗначениеПараметра;
	//						КонецЕсли;
	//					КонецЦикла;
	//					//НастройкиОтчета.НастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(СтрокаПараметров.ИмяПараметра, ЗначениеПараметра);
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			//установка внутренних параметров
	//			Для каждого ТекПараметр Из ОтчетОбъект.ПараметрыОтчета Цикл
	//				Если ТекПараметр.ВариантЗаполнения = Перечисления.Web1C_ВариантыЗаполнениеОтчетовЛК.ВнутреннийПараметр Тогда
	//					Если ТекПараметр.ВнутреннийПараметр = Перечисления.Web1C_ВнутренниеПараметрыОтчетов.ОбъектАвторизации Тогда
	//						Для каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
	//							Если ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки = ТекПараметр.Идентификатор Тогда
	//								ПользовательскаяНастройкаКД.Значение = ДанныеПользователя.ОбъектАвторизации;
	//							КонецЕсли;
	//						КонецЦикла;
	//					КонецЕсли;
	//				ИначеЕсли ТекПараметр.ВариантЗаполнения = Перечисления.Web1C_ВариантыЗаполнениеОтчетовЛК.Значение Тогда
	//					Для каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
	//						Если ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки = ТекПараметр.Идентификатор Тогда
	//							ПользовательскаяНастройкаКД.Значение = ТекПараметр.Значение;
	//						КонецЕсли;
	//					КонецЦикла;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			ОтчетыКлиентСервер.ЗагрузитьНастройки(НастройкиОтчета.Объект.КомпоновщикНастроек, НастройкиОтчета.НастройкиКД, НастройкиОтчета.ПользовательскиеНастройкиКД);
	//			ПараметрыФормирования = Новый Структура;
	//			ПараметрыФормирования.Вставить("Подключение", НастройкиОтчета);
	//			Формирование = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Истина, Истина);
	//			Если Формирование.Успех Тогда
	//				ТабДок = Формирование.ТабличныйДокумент;
	//				
	//				Если СохранятьПДФ Тогда
	//					ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	//					ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.PDF);
	//					ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//					
	//					Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//					Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//					Ответ.Заголовки.Вставить("Content-Disposition", СтрШаблон("attachment; filename=report%1.pdf", Формат(ТекущаяДата(), "ДФ=dd_MM_yy")));
	//				Иначе
	//					ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//					ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//					ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//					
	//					Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//					Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//				КонецЕсли;
	//			Иначе
	//				ДанныеПользователя.Вставить("ТекстОшибки", Формирование.ТекстОшибки);
	//				Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	//	//открываем начальную старницу
	//	Web1C_ФормированиеОтветов.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.Web1C_ВидыСтраниц.Страница404"), Ответ, Неопределено);
	//КонецЕсли;
	
	Возврат Ответ;
КонецФункции


/////////////////////API///////////////////////

Функция ПолучитьСоединение()
	Соединение = Справочники.НастройкиAPI.ПолучитьСоединение(Перечисления.СервисыAPI.СлужбаДоставки);
	Возврат Соединение;
КонецФункции

Функция ПолучитьHTTPЗапрос(АдресРесурса, СтрокаПараметровЗапроса, ДобавитьПараметрыВТелоЗапроса = Ложь)
	HTTPЗапрос = Справочники.НастройкиAPI.ПолучитьHTTPЗапросПоимениМетода(Перечисления.СервисыAPI.СлужбаДоставки, АдресРесурса, СтрокаПараметровЗапроса, ДобавитьПараметрыВТелоЗапроса);
	
	Возврат HTTPЗапрос;
КонецФункции


//вспомагательные методы
Процедура ПолучитьПараметрыОтчета(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Если ПараметрыЗапроса.Свойство("id_report")Тогда
		ИД_отчета = ПараметрыЗапроса["id_report"];
		ИДБлока = ПараметрыЗапроса["block"];
		Отчет = XMLЗначение(Тип("СправочникСсылка.Web1C_ОтчетыЛичногоКабинета"), ИД_отчета);
		Если ЗначениеЗаполнено(Отчет) Тогда
			МакетБлока = Web1C_ВыборкаДанных.ПолучитьМакетБлокаПоИД(ИДБлока);
			Если Не МакетБлока.Пустая() Тогда
				Результат = МакетБлока.ПолучитьОбъект().ПолучитьТекстМакета(Новый Структура("ОбъектАвторизации, Отчет", ДанныеПользователя.ОбъектАвторизации, Отчет));
			Иначе
				Ошибка = "Ошибка с поиском макета блока страницы";
			КонецЕсли;
		Иначе
			Ошибка = "Не найден отчет по ИД - " + ИД_отчета;
		КонецЕсли;
	Иначе
		Ошибка = "Ошибка при передаче ИД отчета - нет ИД";
	КонецЕсли;
КонецПроцедуры



//////////////////////////////////////////////////////
///////////////////////МЕТОДЫ ПЕЧАТИ//////////////////
//////////////////////////////////////////////////////


Процедура ПечатьЗаказа(ДанныеПользователя, ПараметрыЗапроса, Ответ)
	//Если ПараметрыЗапроса.Получить("id_doc") <> Неопределено Тогда
	//	ИД = ПараметрыЗапроса.Получить("id_doc");
	//	Заказ = Web1C_ВыборкаДанных.ПолучитьЗаказПоИД(ИД);
	//	Если ЗначениеЗаполнено(Заказ) И Не Заказ.Пустая() Тогда
	//		ПечатнаяФорма = Новый Структура;
	//		ПечатнаяФорма.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
	//		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати =  "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ЗаказПокупателя";
	//		ПечатнаяФорма.Вставить("ПолныйПутьКМакету", "Документ.ЗаказПокупателя.ПФ_MXL_ЗаказПокупателя");
	//		ПечатнаяФорма.Вставить("СинонимМакета", НСтр("ru='Заказ покупателя';uk='Замовлення покупця'"));
	//		
	//		МассивОбъектов = Новый Массив; 
	//		МассивОбъектов.Добавить(Заказ);
	//		ОбъектыПечати = Новый СписокЗначений;
	//		ПараметрыПечати = Неопределено;
	//		Документы.ЗаказПокупателя.СформироватьЗаказПокупателя(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ложь);
	//		
	//	
	//		ТабДок = ПечатнаяФорма.ТабличныйДокумент;
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//		ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//		ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//		
	//		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//		//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	Иначе
	//		Ошибка = "Невозможно напечатать документ с ИД - " + ИД + "!";
	//		
	//		Ответ.УстановитьТелоИзСтроки(Web1C_ФормированиеОтветов.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора акта приема-передачи - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Web1C_ФормированиеОтветов.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//КонецЕсли;
	//
	//Ответ.Заголовки.Вставить("Title", "Печать заказа");
КонецПроцедуры

Процедура ПечатьЗаказаPdf(ДанныеПользователя, ПараметрыЗапроса, Ответ)
	//Если ПараметрыЗапроса.Получить("id_doc") <> Неопределено Тогда
	//	ИД = ПараметрыЗапроса.Получить("id_doc");
	//	Заказ = Web1C_ВыборкаДанных.ПолучитьЗаказПоИД(ИД);
	//	Если ЗначениеЗаполнено(Заказ) И Не Заказ.Пустая() Тогда
	//		ПечатнаяФорма = Новый Структура;
	//		ПечатнаяФорма.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
	//		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати =  "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ЗаказПокупателя";
	//		ПечатнаяФорма.Вставить("ПолныйПутьКМакету", "Документ.ЗаказПокупателя.ПФ_MXL_ЗаказПокупателя");
	//		ПечатнаяФорма.Вставить("СинонимМакета", НСтр("ru='Заказ покупателя';uk='Замовлення покупця'"));
	//		
	//		МассивОбъектов = Новый Массив; 
	//		МассивОбъектов.Добавить(Заказ);
	//		ОбъектыПечати = Новый СписокЗначений;
	//		ПараметрыПечати = Неопределено;
	//		Документы.ЗаказПокупателя.СформироватьЗаказПокупателя(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Неопределено, "uk");
	//		
	//	
	//		ТабДок = ПечатнаяФорма.ТабличныйДокумент;
	//		
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	//		ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.PDF);
	//		ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//		
	//		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//		Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//	Иначе
	//		Ошибка = "Невозможно напечатать документ с ИД - " + ИД + "!";
	//		
	//		Ответ.УстановитьТелоИзСтроки(Web1C_ФормированиеОтветов.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора акта приема-передачи - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Web1C_ФормированиеОтветов.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//КонецЕсли;
	//
	//Ответ.Заголовки.Вставить("Title", "Печать заказа pdf");
КонецПроцедуры

Процедура ПечатьЭтикеткиЗаказа(ДанныеПользователя, ПараметрыЗапроса, Ответ) Экспорт 
	//Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
	//	Ид = ПараметрыЗапроса.Получить("id");
	//	Заказ = ВыборкаДанныхСайтСервер.ПолучитьЗаказПоИД(Ид);
	//	Если Не Заказ.Пустая() Тогда
	//		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Поклажедатель") = ДанныеПользователя.Контрагент Тогда
	//			МассивОбъектов = Новый Массив; 
	//			МассивОбъектов.Добавить(Заказ);
	//			ОбъектыПечати = Новый СписокЗначений;
	//			ПараметрыПечати = Неопределено;
	//			ТабДок = Документы.ЗаказКлиента.СформироватьЭтикеткуЗаказа(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
	//			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//			ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//			ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//			
	//			Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//			//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//			Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//		Иначе
	//			Ошибка = СтрШаблон("Заказ с ИД %1 не принадлежит %2!", ИД);
	//			
	//			Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//			Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//		КонецЕсли;
	//	Иначе
	//		Ошибка = СтрШаблон("Не найден заказ с ИД - %1!", ИД, ДанныеПользователя.ДанныеКонтрагента.Контрагент);
	//		
	//		Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора заказа - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//КонецЕсли;
КонецПроцедуры

Процедура ПечатьприходнойНакладной(ДанныеПользователя, ПараметрыЗапроса, Ответ)
	//Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
	//	ИД = ПараметрыЗапроса.Получить("id");
	//	Закупка = ВыборкаДанныхСайтСервер.ПолучитьЗакупкуПоИД(ИД);
	//	Если Не Закупка.Пустая() Тогда
	//		МассивОбъектов = Новый Массив;
	//		МассивОбъектов.Добавить(Закупка);
	//		ТабДок = Документы.ПриобретениеТоваровУслуг.СформироватьПечатнуюФормуПриходнаяНакладная(МассивОбъектов, Новый СписокЗначений);
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//		ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//		ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//		
	//		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//		//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	Иначе
	//		Ошибка = "Невозможно напечатать документ с ИД - " + ИД + "!";
	//		
	//		Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора акта приема-передачи - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//КонецЕсли;
	//
	//Ответ.Заголовки.Вставить("Title", "Печать приемки");
КонецПроцедуры

//==============чтение файла из multi part form data===============
&НаСервере
Функция ПрочитатьСообщениеСФайлами(заголовки, тело)
	Результат = Новый Массив;
	
	Разделитель = ПолучитьРазделительСоставногоСообщения(заголовки);
	Маркеры = Новый Массив();
	Маркеры.Добавить(Разделитель);
	Маркеры.Добавить(Разделитель + Символы.ПС);
	Маркеры.Добавить(Разделитель + Символы.ВК);
	Маркеры.Добавить(Разделитель + Символы.ВК + Символы.ПС);
	Маркеры.Добавить(Разделитель + "--");
	Текст = Неопределено;
	Файл = Неопределено;
	
	ЧтениеДанных = Новый ЧтениеДанных(Тело);
	// Переходим к началу первой части
	ЧтениеДанных.ПропуститьДо(Маркеры);
	// Далее в цикле читаем все части
	Пока Истина Цикл
		Часть = чтениеДанных.ПрочитатьДо(Маркеры);
		Если Не Часть.МаркерНайден Тогда
			// Неправильно сформированное сообщение
			Прервать;
		КонецЕсли;
		ЧтениеЧасти = Новый ЧтениеДанных(Часть.ОткрытьПотокДляЧтения());
		ЗаголовкиЧасти = ПрочитатьЗаголовки(ЧтениеЧасти);
		ИмяЧасти = ПолучитьИмяСообщения(ЗаголовкиЧасти);
		Если ИмяЧасти <> Неопределено Тогда
			Файл = ЧтениеЧасти.Прочитать().ПолучитьДвоичныеДанные();
			
			Результат.Добавить(Новый Структура("ИмяФайла, Файл", ИмяЧасти, Файл));
		КонецЕсли;
		
		Если Часть.ИндексМаркера = 4 Тогда
			// Прочитали последнюю часть
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат; 
КонецФункции

&НаСервере
Функция ПрочитатьЗаголовки(Чтение)
	Заголовки = Новый Соответствие();
	Пока Истина Цикл
		Стр = Чтение.ПрочитатьСтроку();
		Если Стр = "" Тогда
			Прервать;
		КонецЕсли;
		Части = СтрРазделить(Стр, ":");
		ИмяЗаголовка = СокрЛП(Части[0]);
		Значение = СокрЛП(Части[1]);
		Заголовки.Вставить(ИмяЗаголовка, Значение);
	КонецЦикла;
	Возврат Заголовки;
КонецФункции

// Поиск строки-разделителя составного сообщения из заголовков
// Предполагается, что значение разделителя задается в заголовке
// Content-Type в следующем виде:
// Content-Type: multipart/form-data; boundary=<Разделитель>
&НаСервере
Функция ПолучитьРазделительСоставногоСообщения(Заголовки)
	ТипСодержимого = Заголовки.Получить("Content-Type");
	Свойства = СтрРазделить(ТипСодержимого, ";", Ложь);
	Граница = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "boundary" Тогда
			Продолжить;
		КонецЕсли;
		Граница = СокрЛП(Части[1]);
		Прервать;
	КонецЦикла;
	Возврат Граница;
КонецФункции

// Имя сообщения получается из заголовка
// Content-Disposition
// Content-Disposition: form-data; name=<Имя сообщения>
&НаСервере
Функция ПолучитьИмяСообщения(Заголовки)
	Описание = Заголовки.Получить("Content-Disposition");
	Свойства = СтрРазделить(Описание, ";", Ложь);
	Имя = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "filename" Тогда
			Продолжить;
		КонецЕсли;
		Имя = СтрЗаменить(СокрЛП(Части[1]), """", "");
		Прервать;
	КонецЦикла;
	Возврат Имя;
КонецФункции
//==============чтение файла из multi part form data===============
